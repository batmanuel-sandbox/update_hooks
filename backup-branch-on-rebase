#!/bin/bash
#
# Save any head (== branch) about to be deleted or rebased.
#
# Changed heads are stored as backups/<name>/<increment> branches, where
# "increment" starts at 1 and monotonically increases thereafter. 
#
# Args (see 'man githooks', look for update hook):
#    $1: the name of the ref being updated (e.g. refs/heads/master or refs/tags/foo)
#    $2: the old object name stored in the ref,
#    $3: and the new objectname to be stored in the ref.
#
# Note that $2 can be 0000000000000000000000000000000000000000 if this is ref creation
# Note that $3 can be 0000000000000000000000000000000000000000 if this is ref deletion
#

REF="$1"
OLDSHA="$2"
NEWSHA="$3"

#
# Exit if not matching criteria
#
[[ $GL_REPO != LSST/* && $GL_REPO != contrib/* ]]	&& exit 0;	# apply only to repos in LSST/ and contrib/ hierarchy

[[ "$REF" != refs/heads/* ]]				&& exit 0;	# Only save branches (tags not saved yet, deleting of tags should be access-controlled)
[[ "$REF" = refs/heads/backups/* ]]			&& exit 0;	# Don't save deletions of backups (these should be access-controlled in gitolite config)

[[ "$OLDSHA"  = 0000000000000000000000000000000000000000 ]] && exit 0;   # ref creation
[[ "$NEWSHA" != 0000000000000000000000000000000000000000 && -z $(git rev-list "$OLDSHA" ^"$NEWSHA") ]] && exit 0; # not deletion or rebase

#
# Create a backup branch pointing to $OLDSHA
#
next_increment()
{
	for r in $(git show-ref --heads | cut -d\  -f 2 | grep "^refs/heads/$1/" ); do
		echo ${r#refs/heads/$1/}
	done | sort -n | tail -n 1
}
NAME=${REF#refs/heads/}
PREFIX="backups/$NAME"
INCREMENT=$(next_increment $PREFIX)
((INCREMENT++))
NEWBRANCH="$PREFIX/$INCREMENT"

git branch "$NEWBRANCH" "$OLDSHA" || { echo "[backup-branch-on-rebase] failed to save $NAME as $NEWBRANCH; aborting."; exit 1; }
echo "[backup-branch-on-rebase] saved $NAME as $NEWBRANCH."

exit 0;
